/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package pionc */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 4 "webrtc_wrapper.go"

#include <stdlib.h> // for C.free
#include <stdint.h> // for uint8_t

typedef enum {
	PionErrorCodeInvalid = -1
} PionErrorCode;

typedef enum {
	PionConnectionStateUnknown,

	// PeerConnectionStateNew indicates that any of the ICETransports or
	// DTLSTransports are in the "new" state and none of the transports are
	// in the "connecting", "checking", "failed" or "disconnected" state, or
	// all transports are in the "closed" state, or there are no transports.
	PionConnectionStateNew,

	// PeerConnectionStateConnecting indicates that any of the
	// ICETransports or DTLSTransports are in the "connecting" or
	// "checking" state and none of them is in the "failed" state.
	PionConnectionStateConnecting,

	// PeerConnectionStateConnected indicates that all ICETransports and
	// DTLSTransports are in the "connected", "completed" or "closed" state
	// and at least one of them is in the "connected" or "completed" state.
	PionConnectionStateConnected,

	// PeerConnectionStateDisconnected indicates that any of the
	// ICETransports or DTLSTransports are in the "disconnected" state
	// and none of them are in the "failed" or "connecting" or "checking" state.
	PionConnectionStateDisconnected,

	// PeerConnectionStateFailed indicates that any of the ICETransports
	// or DTLSTransports are in a "failed" state.
	PionConnectionStateFailed,

	// PeerConnectionStateClosed indicates the peer connection is closed
	PionConnectionStateClosed
} PionConnectionState;

typedef enum {
	PionDataChannelStateUnknown,

	// DataChannelStateConnecting indicates that the data channel is being
	// established. This is the initial state of DataChannel, whether created
	// with CreateDataChannel, or dispatched as a part of an DataChannelEvent.
	PionDataChannelStateConnecting,

	// DataChannelStateOpen indicates that the underlying data transport is
	// established and communication is possible.
	PionDataChannelStateOpen,

	// DataChannelStateClosing indicates that the procedure to close down the
	// underlying data transport has started.
	PionDataChannelStateClosing,

	// DataChannelStateClosed indicates that the underlying data transport
	// has been closed or could not be established.
	PionDataChannelStateClosed
} PionDataChannelState;

typedef enum {
	PionIceGatheringStateUnknown,

	// ICEGatheringStateNew indicates that any of the ICETransports are
	// in the "new" gathering state and none of the transports are in the
	// "gathering" state, or there are no transports.
	PionIceGatheringStateNew,

	// ICEGatheringStateGathering indicates that any of the ICETransports
	// are in the "gathering" state.
	PionIceGatheringStateGathering,

	// ICEGatheringStateComplete indicates that at least one ICETransport
	// exists, and all ICETransports are in the "completed" gathering state.
	PionIceGatheringStateComplete
} PionIceGatheringState;

typedef enum {
	PionSignalingStateUnknown,

	// SignalingStateStable indicates there is no offer/answer exchange in
	// progress. This is also the initial state, in which case the local and
	// remote descriptions are nil.
	PionSignalingStateStable,

	// SignalingStateHaveLocalOffer indicates that a local description, of
	// type "offer", has been successfully applied.
	PionSignalingStateHaveLocalOffer,

	// SignalingStateHaveRemoteOffer indicates that a remote description, of
	// type "offer", has been successfully applied.
	PionSignalingStateHaveRemoteOffer,

	// SignalingStateHaveLocalPranswer indicates that a remote description
	// of type "offer" has been successfully applied and a local description
	// of type "pranswer" has been successfully applied.
	PionSignalingStateHaveLocalPranswer,

	// SignalingStateHaveRemotePranswer indicates that a local description
	// of type "offer" has been successfully applied and a remote description
	// of type "pranswer" has been successfully applied.
	PionSignalingStateHaveRemotePranswer,

	// SignalingStateClosed indicates The PeerConnection has been closed.
	PionSignalingStateClosed
} PionSignalingState;

typedef struct {
    const char* hostname;
    const char* username;
	const char* credential;
    int credential_type;
} PionIceServer;

typedef struct {
	const PionIceServer* ice_servers;
	int num_servers;
} PionPeerConnectionConfiguration;

// Example of function declaration in C
extern void onMessage(uint8_t* msg, int len);
extern void onIceCandidate(const char* candidate);
extern void onDataChannelMessage(const char* msg, int len);

typedef void (*cb)(int);
static void helper(cb f, int x) { f(x); }

// Helper to call log callbacks
typedef void (*logcb)(const char*, int);
static void helper_log(logcb f, const char* msg, int level) { f(msg, level); }

// Helper to call ICE candidate callback
typedef void (*icecandidatecb)(const char*);
static void helper_ice_candidate(icecandidatecb f, const char* msg) { f(msg); }

// helper to call local description callback
typedef void (*localdescriptioncb)(int, const char*);
static void helper_local_description(localdescriptioncb f, int type, const char* sdp) { f(type, sdp); }

// helper to call new track callback
typedef void (*remotetrackcb)(int, unsigned int, const char*, unsigned int, unsigned short);
static void helper_remote_track(remotetrackcb f, int kind, unsigned int ssrc, const char* mime, unsigned int sample_rate, unsigned short channels) { f(kind, ssrc, mime, sample_rate, channels); }

// helper to call new track callback
typedef void (*trackdatacb)(unsigned int, const char*, unsigned int);
static void helper_track_data(trackdatacb f, unsigned int ssrc, const char* data, unsigned int length) { f(ssrc, data, length); }

typedef struct {
	logcb log_callback;
	icecandidatecb ice_candidate_callback;
	localdescriptioncb local_description_callback;
	remotetrackcb remote_track_callback;
	trackdatacb track_data_callback;
} PionCallbacks;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void pionInit();
extern void pionSetCallbacks(PionCallbacks cb);
extern void pionClosePeerConnection();
extern GoInt pionCreatePeerConnection(PionPeerConnectionConfiguration* config);
extern GoInt32 pionCreateDataChannel(char* label);
extern PionConnectionState pionGetConnectionState();
extern PionIceGatheringState pionGetIceGatheringState();
extern PionSignalingState pionGetSignalingState();
extern void pionCreateOffer();
extern void pionSetRemoteDescription(char* sdp);
extern void pionAddICECandidate(char* candidate);
extern void pionSendDataChannelText(GoInt32 channel, char* msg);
extern PionDataChannelState pionGetDataChannelReadyState(GoInt32 channel);
extern void pionSendTrackDataPacket(char* data, int length);

#ifdef __cplusplus
}
#endif
